// <auto-generated />
using System;
using LexiCore.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LexiCore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251002001051_Init_All")]
    partial class Init_All
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LexiCore.Domain.Entities.Analisis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArchivoId")
                        .HasColumnType("int")
                        .HasColumnName("ArchivoId");

                    b.Property<DateTime>("FechaAnalisis")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FechaAnalisis");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PalabrasFrecuentes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("PalabrasFrecuentes");

                    b.Property<string>("PalabrasRaras")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("PalabrasRaras");

                    b.Property<string>("Pronombres")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Pronombres");

                    b.Property<string>("Sustantivos")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Sustantivos");

                    b.Property<int>("TotalPalabras")
                        .HasColumnType("int")
                        .HasColumnName("TotalPalabras");

                    b.Property<string>("Verbos")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Verbos");

                    b.HasKey("Id");

                    b.HasIndex("ArchivoId");

                    b.ToTable("Analisis", (string)null);
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.Archivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("Contenido");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FechaSubida");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Nombre");

                    b.Property<string>("Ruta")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Ruta");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Archivos", (string)null);
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.AutenticacionFacial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("EncodingFacial")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("encoding_facial");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImagenReferencia")
                        .HasColumnType("TEXT")
                        .HasColumnName("imagen_referencia");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Activo" }, "idx_activo_facial");

                    b.HasIndex(new[] { "UsuarioId" }, "idx_usuario_facial");

                    b.ToTable("autenticacion_facial", (string)null);
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.CodigoQr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(555)
                        .HasColumnType("varchar(555)")
                        .HasColumnName("codigo_qr");

                    b.Property<string>("QrHash")
                        .IsRequired()
                        .HasMaxLength(555)
                        .HasColumnType("varchar(555)")
                        .HasColumnName("qr_hash");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Activo" }, "idx_activo_qr");

                    b.HasIndex(new[] { "Codigo" }, "idx_codigo_qr")
                        .IsUnique();

                    b.HasIndex(new[] { "UsuarioId" }, "idx_usuario_qr");

                    b.ToTable("codigos_qr", (string)null);
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.MetodoNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Destino")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("destino");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tipo_notificacion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Tipo" }, "idx_tipo_notif");

                    b.HasIndex(new[] { "UsuarioId" }, "idx_usuario_notif");

                    b.ToTable("metodos_notificacion", (string)null);
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.Reporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalisisId")
                        .HasColumnType("int")
                        .HasColumnName("AnalisisId");

                    b.Property<string>("Destino")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Destino");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FechaGeneracion");

                    b.Property<string>("MedioNotificacion")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("MedioNotificacion");

                    b.Property<string>("RutaPdf")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("RutaPdf");

                    b.HasKey("Id");

                    b.HasIndex("AnalisisId");

                    b.ToTable("Reportes", (string)null);
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.Sesion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activa");

                    b.Property<DateTime>("FechaLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("fecha_login")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("MetodoLogin")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("metodo_login");

                    b.Property<string>("SessionTokenHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("session_token");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Activa" }, "idx_activa");

                    b.HasIndex(new[] { "SessionTokenHash" }, "idx_session_token");

                    b.HasIndex(new[] { "UsuarioId" }, "idx_usuario_sesion");

                    b.ToTable("sesiones", (string)null);
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Activo");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FechaRegistro");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Nombre");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Telefono");

                    b.Property<string>("UsuarioNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Usuario");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Activo" }, "idx_activo");

                    b.HasIndex(new[] { "Email" }, "idx_email")
                        .IsUnique();

                    b.HasIndex(new[] { "UsuarioNombre" }, "idx_usuario")
                        .IsUnique();

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.Analisis", b =>
                {
                    b.HasOne("LexiCore.Domain.Entities.Archivo", "Archivo")
                        .WithMany()
                        .HasForeignKey("ArchivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Archivo");
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.Archivo", b =>
                {
                    b.HasOne("LexiCore.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.AutenticacionFacial", b =>
                {
                    b.HasOne("LexiCore.Domain.Entities.Usuario", "Usuario")
                        .WithMany("AutenticacionesFaciales")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.CodigoQr", b =>
                {
                    b.HasOne("LexiCore.Domain.Entities.Usuario", "Usuario")
                        .WithMany("CodigosQr")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.MetodoNotificacion", b =>
                {
                    b.HasOne("LexiCore.Domain.Entities.Usuario", "Usuario")
                        .WithMany("MetodosNotificacion")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.Reporte", b =>
                {
                    b.HasOne("LexiCore.Domain.Entities.Analisis", "Analisis")
                        .WithMany()
                        .HasForeignKey("AnalisisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analisis");
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.Sesion", b =>
                {
                    b.HasOne("LexiCore.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Sesiones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LexiCore.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("AutenticacionesFaciales");

                    b.Navigation("CodigosQr");

                    b.Navigation("MetodosNotificacion");

                    b.Navigation("Sesiones");
                });
#pragma warning restore 612, 618
        }
    }
}
